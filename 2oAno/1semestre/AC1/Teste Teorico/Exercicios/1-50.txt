CASO TENHAM DÚVIDAS PERGUNTEM CARALHO

1 - CPU, Unidades de I/O e Memória

2 - ALU, Registos Internos e Control Unit

3 - O Program Counter guarda o endereço da próx instrução a ser executada

4 - O compilador transforma código de alto nível em código Assembly

5 - O assembler transforma código Assembly em código de máquina

6 - 32

7 - 32 bits

8 - add/addu/sub $Rdst, $Rsrc1, $Rsrc2

9 - A instrução srl simplesmente acrescenta 0s à esquerda. A instrução sra extende o bit mais significativo.

10. a) 1000 0001 0011 0101 0100 1010 1011 0011
       0100 0000 1001 1010 1010 0101 0101 1001
       $3 = 0x409AA559
       
    b) 1000 0001 0011 0101 0100 1010 1011 0011
       1100 0000 1001 1010 1010 0101 0101 1001
       $4 = 0xC09AA559
       
11. a) Um system call é uma chamada a uma função de sistema que permite fazer operações no CPU, como por exemplo imprimir valores no ecrã ou ler input do utilizador.
    b) $v0
    c) $a0 a $a3 + $f12($f13) e $f14($f15)
    d) $v0 ou $f0
    
12 - Um endereço é um identificador único para uma posição de memória

13 - O espaço de endereçamento de um processador é o conjunto de todos os endereços que o processador consegue aceder para ler/escrever.

14 - Secção de dados: ALU, Registos Internos e Multiplexers
     Unidade de Controlo: Responsável pela coordenação dos elementos do datapath
     
15 - O conceito fundamental para esse modelo é as instruções serem representadas da mesma forma que os números e os programas são armazenados na memória para serem lidos e escritos, tal como números.

16 - Uma instrução é codificada em binário, tendo em conta que a estrutura e conteúdo depende do ISA.

17 - O conceito de ISA é o conjunto de todas as operações e instruções que o processador entende e pode executar, assim como a estrutura e o comportamento funcional das instruções.

18 - Há 3 classes de instruções: instruções de processamento, instruções de transferência de informação e instruções de controlo de fluxo de execução.

19 - O MIPS é do tipo load-store, que é caracterizado pelo facto de que os operandos das instruções lógicas e aritméticas têm de estar obrigatoriamente em registos internos do CPU, tendo em conta que se houver dados na memória, têm de ser carregados anteriormente e armazenados posteriormente. Numa arquitetura do tipo register-memory, os operandos destas instruções podem aceder à memória diretamente, sendo que podem estar em registos internos do CPU *ou* na memória externa.

20 - 5 operações:
     - instruction fetch
     - instruction decode
     - operand fetch
     - execute
     - store result
     
21 - Address Bus

22 - É o barramento de transferência de dados.

23 - 00000 00 00 00 
     24 - 11 = 13
     
     -2^12 -> (2^12)-1

24. a) 2^32
    b) 2^32 = 2^30 * 4 = 1 Gbit * 4 = 4Gbit
       4 GBit / 8 = 512 MB

25 - 2^24 * 32 = 512 Mbit
     512 Mbit / 8 = 64 MB

26. a) 32 bits
    b) O registo $0 não pode ser escrito e tem sempre o valor 0x00000000.
    c) $31

27. a) OpCode + 3 registos + ShAmt + Funct
       6 campos
    b) OpCode sempre 0
       Registo de fonte 1
       Registo de fonte 2
       Registo de destino
       Quantidade de bits para dar shift
       Código da operação
    c) 0
    d) Não faz nada

28 - srl
     unsigned int a = 144;  // 1001 0000
     a = a >> 4;            // 0000 1001
     
     sra
     int a = -112;  // 1001 0000
     a = a >> 4;    // 1111 1001

29 - or $4, $15, $0

30 - a. xor $5,$13,$24
     b. sub $25,$14,$8
     c. sll $3,$9,7
     d. sra $18,$9,8 

        opcode     rs      rt      rd    shamt   funct      hex
     a. 0000 00  01 101  1 1000  0010 1  000 00  10 0110    0x01B82826
     b. 0000 00  01 110  0 1000  1100 1  000 00  10 0010    0x01C8C822
     c. 0000 00  00 000  0 1001  0001 1  001 11  00 0000    0x000919C0
     d. 0000 00  00 000  0 1001  1001 0  010 00  00 0011    0x00099293
     
31 - x -> $t2; y -> $t5
     
     add $t5, $t2, $t2
     add $t5, $t5, $t2
     sub $t5, $0, $t5
     addi $t5, $t5, 5

34. a) g = 1
       h = 4
       i = 3
       j = 4
    b) g = 1
       h = 7
       i = 3
       j = 5
       
35 - slt $R1, $R2, $R3
     Se $R2 < $R3, $R1 = 1
     Se $R2 >= $R3, $R1 = 0

36. a) 1
    b) 0

37 - $0

39 - A verificação da condição é só no final

41 - Endereçamento indireto com deslocamento

42 - Constante -> offset/deslocamento
     $5 -> Registo que contém o endereço base
     $3 -> Registo de destino
     
43 - I
     OpCode (6 bits) + Rs (5 bits) + Rt (5 bits) + Imm (16 bits)
     
44 - sw escreve 4 bytes (escreve uma word) e sb escreve 1 byte

45 - lb é signed, lbu é unsigned

46 - Dá erro

48 - 100011 00101 00011 0000 0000 0010 0100
     0x8CA30024

49 - $3 = 0x28272625

0x10010000 - 0x01
0x10010001 - 0x02
0x10010002 - 0x03
0x10010003 - 0x04
0x10010004 - 0x05
0x10010005 - 0x06
0x10010006 - 0x07
0x10010007 - 0x08
0x10010008 - 0x09
0x10010009 - 0x0A
0x1001000A - 0x0B
0x1001000B - 0x0C
0x1001000C - 0x0D
0x1001000D - 0x0E
0x1001000E - 0x0F
0x1001000F - 0x10
0x10010010 - 0x11
0x10010011 - 0x12
0x10010012 - 0x13
0x10010013 - 0x14
0x10010014 - 0x15
0x10010015 - 0x16
0x10010016 - 0x17
0x10010017 - 0x18
0x10010018 - 0x19
0x10010019 - 0x1A
0x1001001A - 0x1B
0x1001001B - 0x1C
0x1001001C - 0x1D
0x1001001D - 0x1E
0x1001001E - 0x1F
0x1001001F - 0x20
0x10010020 - 0x21
0x10010021 - 0x22
0x10010022 - 0x23
0x10010023 - 0x24
0x10010024 - 0x25  0x25242322
0x10010025 - 0x26
0x10010026 - 0x27
0x10010027 - 0x28
0x10010028 - 0x29
0x10010029 - 0x2A
0x1001002A - 0x2B
0x1001002B - 0x2C

50. a) 0x000000A4
    b) 0xFFFFFFA4
